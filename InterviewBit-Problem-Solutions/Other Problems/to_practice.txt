https://practice.geeksforgeeks.org/problems/element-that-appears-once-where-every-element-occurs-twice/0/?ref=self

https://www.geeksforgeeks.org/queries-on-xor-of-xors-of-all-subarrays/

https://practice.geeksforgeeks.org/problems/maximum-sub-array/0/?ref=self

https://practice.geeksforgeeks.org/problems/linked-list-that-is-sorted-alternatingly/1/?ref=self

https://www.hackerrank.com/challenges/minimum-swaps-2/problem

https://practice.geeksforgeeks.org/problems/consecutive-1s-not-allowed/0/?ref=self

https://www.codechef.com/COOK109B/problems/PEPPERON

https://www.codechef.com/COOK109B

https://practice.geeksforgeeks.org/problems/median-in-a-row-wise-sorted-matrix/0/?ref=self



--------------------- Algorithms -----------------------
https://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/



--------------------- HACKERRANK -----------------------
https://www.hackerrank.com/challenges/minimum-average-waiting-time/problem

http://tutorials.jenkov.com/java-regex/matcher.html

import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

class Order{
    int at, bt;
    Order(int at, int bt){
        this.at = at;
        this.bt = bt;
    }
}

public class Solution {

    /*
     * Complete the minimumAverage function below.
    */

    public static Comparator<Order> at_comparator = new Comparator<Order>(){
        @Override
        public int compare(Order o1, Order o2){
            return o1.at - o2.at;
        }
    };

    public static Comparator<Order> bt_comparator = new Comparator<Order>(){
        @Override
        public int compare(Order o1, Order o2){
            return o1.bt - o2.bt;
        }
    };


    static int minimumAverage(int[][] customers) {
        ArrayList<Order> orders = new ArrayList<>();

        for(int[] i : customers){
            orders.add(new Order(i[0], i[1]));
        }

        Collections.sort(orders, at_comparator);

        PriorityQueue<Order> queue = new PriorityQueue<>(bt_comparator);

        int twt = 0; // total_waiting_time

        int ct = order.get(0).at; // current_time
        int ct_i = 0; // current_time_index
        
        while(order.get(ct_i).at <= ct){
            queue.add(order.get(ct_i));
            ct_i++;
        }

        while(ct_i < orders.size()){
            Order to_schedule = queue.pop();
        
            ct += to_schedule.bt;

            while(ct_i < orders.size() && order.get(ct_i).at <= ct){
                queue.add(order.get(ct_i));
                ct_i++;
            }

            ct = order.get()




        }

        




        



    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])*");

        int[][] customers = new int[n][2];

        for (int customersRowItr = 0; customersRowItr < n; customersRowItr++) {
            String[] customersRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])*");

            for (int customersColumnItr = 0; customersColumnItr < 2; customersColumnItr++) {
                int customersItem = Integer.parseInt(customersRowItems[customersColumnItr]);
                customers[customersRowItr][customersColumnItr] = customersItem;
            }
        }

        int result = minimumAverage(customers);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}



https://www.hackerrank.com/challenges/two-pluses/problem


import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Point{
    int x, y;
    Point(int x, int y){
        this.x=x;
        this.y=y;
    }

    @Override
    public int hashCode(){
        return this.x+this.y;
    }

    @Override
    public boolean equals(Object o){
        if(this==o){
            return true;
        }
        if(!(o instanceof Point)){
            return false;
        }

        Point oo = (Point)o;

        return this.x==oo.x && this.y==oo.y; 
    }

    public String toString(){
        return this.x + "," + this.y;
    }
}

class Plus{
    Point center;
    int length;
    Plus(Point center, int length){
        this.center = center;
        this.length = length;
    }
}

public class Solution {

    // Complete the twoPluses function below.
    static int twoPluses(String[] grid_str) {
        int r = grid_str.length;
        int c = grid_str[0].length();
        
        int[][] grid = new int[r][c];
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid_str[i].charAt(j)=='G'){
                    grid[i][j] = 1;
                }else{
                    grid[i][j] = 0;
                }
            }
        }

        ArrayList<Plus> pluses = new ArrayList<>();

        // find all pluses
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j] == 1){
                    int cl = 0;     // curr_length

                    if((i-(cl+1)>=0 && grid[i-(cl+1)][j]==1) && (i+(cl+1)<r && grid[i+(cl+1)][j]==1) && (j-(cl+1)>=0 && grid[i][j-(cl+1)]==1) && (j+(cl+1)<c && grid[i][j+(cl+1)]==1)){
                        cl++;
                    }

                    pluses.add(new Plus(new Point(i,j), cl));                    
                }
            }
        }

        // use brute force to find 2 largest pairs of plus
        int first_largest = Integer.MIN_VALUE;
        int second_largest = Integer.MIN_VALUE+1;
        


    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nm = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nm[0]);

        int m = Integer.parseInt(nm[1]);

        String[] grid = new String[n];

        for (int i = 0; i < n; i++) {
            String gridItem = scanner.nextLine();
            grid[i] = gridItem;
        }

        int result = twoPluses(grid);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
